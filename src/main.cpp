

/*********************************************************************
This is an example sketch for our Monochrome Nokia 5110 LCD Displays

  Pick one up today in the adafruit shop!
  ------> http://www.adafruit.com/products/338

These displays use SPI to communicate, 4 or 5 pins are required to
interface

Adafruit invests time and resources providing this open source code,
please support Adafruit and open-source hardware by purchasing
products from Adafruit!

Written by Limor Fried/Ladyada  for Adafruit Industries.
BSD license, check license.txt for more information
All text above, and the splash screen must be included in any redistribution
*********************************************************************/
#include <Arduino.h>
#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>

// Software SPI (slower updates, more flexible pin options):
// pin 9 - Serial clock out (SCLK)
// pin 5 - Serial data out (DIN)
// pin 4 - Data/Command select (D/C)
// pin 3 - LCD chip select (CS)
// pin 2 - LCD reset (RST)
Adafruit_PCD8544 display = Adafruit_PCD8544(9, 5, 4, 3, 2);

// Hardware SPI (faster, but must use certain hardware pins):
// SCK is LCD serial clock (SCLK) - this is pin 13 on Arduino Uno
// MOSI is LCD DIN - this is pin 11 on an Arduino Uno
// pin 5 - Data/Command select (D/C)
// pin 4 - LCD chip select (CS)
// pin 3 - LCD reset (RST)
// Adafruit_PCD8544 display = Adafruit_PCD8544(5, 4, 3);
// Note with hardware SPI MISO and SS pins aren't used but will still be read
// and written to during SPI transfer.  Be careful sharing these pins!

#define NUMFLAKES 10
#define XPOS 0
#define YPOS 1
#define DELTAY 2


#define LOGO16_GLCD_HEIGHT 45
#define LOGO16_GLCD_WIDTH  45

static const unsigned char PROGMEM puppy[] =
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x03, 0xf9, 
  0xff, 0xfc, 0xfe, 0x00, 0x1f, 0xff, 0x80, 0x0f, 0xff, 0x80, 0x3f, 0xfc, 0x00, 0x01, 0xff, 0xe0, 
  0x7f, 0xf8, 0x00, 0x00, 0xff, 0xf0, 0xff, 0xf8, 0x00, 0x00, 0xff, 0xf0, 0xff, 0xf0, 0x00, 0x00, 
  0x7f, 0xf8, 0xff, 0xf0, 0x00, 0x00, 0x7f, 0xf8, 0xff, 0xf0, 0x00, 0x00, 0x7f, 0xf8, 0xff, 0xf0, 
  0x00, 0x00, 0x7f, 0xf8, 0xff, 0xf0, 0x00, 0x00, 0x7f, 0xf8, 0xff, 0xe0, 0x00, 0x00, 0x7f, 0xf8, 
  0xff, 0xe0, 0x00, 0x0f, 0xbf, 0xf8, 0xff, 0xe0, 0x00, 0x3f, 0xff, 0xf8, 0xff, 0xe0, 0x00, 0x3f, 
  0xff, 0xf0, 0x7f, 0xc0, 0x00, 0x7f, 0xff, 0xf0, 0x7f, 0xc0, 0x00, 0x70, 0xff, 0xf0, 0x7f, 0xc3, 
  0x00, 0x66, 0x7f, 0xf0, 0x7f, 0x87, 0x80, 0x6f, 0x7f, 0xf0, 0x7f, 0x87, 0x80, 0x4f, 0x7f, 0xe0, 
  0x3f, 0x07, 0x80, 0x4f, 0x7f, 0xe0, 0x1f, 0x07, 0x80, 0x6f, 0x77, 0xc0, 0x0e, 0x03, 0x00, 0x66, 
  0x77, 0x80, 0x03, 0x00, 0x0f, 0x30, 0xe6, 0x00, 0x03, 0x00, 0x0f, 0x9f, 0xc4, 0x00, 0x01, 0x00, 
  0x0f, 0x86, 0x04, 0x00, 0x01, 0x00, 0x06, 0x00, 0x0c, 0x00, 0x01, 0x80, 0x02, 0x00, 0x0c, 0x00, 
  0x00, 0x80, 0xff, 0xf8, 0x18, 0x00, 0x00, 0xc0, 0x3f, 0xe0, 0x18, 0x00, 0x00, 0x60, 0x0f, 0x80, 
  0x30, 0x00, 0x00, 0x30, 0x0f, 0x80, 0x60, 0x00, 0x00, 0x38, 0x0f, 0x80, 0xc0, 0x00, 0x00, 0x1c, 
  0x07, 0x01, 0x80, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x1e, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };


static const unsigned char PROGMEM poop[] =
{ 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x03, 
  0xfe, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x80, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x00, 
  0x00, 0x07, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0x80, 0x00, 0x00, 0x07, 0xff, 0xff, 
  0xc0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x3f, 
  0xff, 0xff, 0xe0, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x00, 
  0x00, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xff, 0xff, 
  0xfc, 0x00, 0x01, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x01, 0xfc, 0x1f, 0xc1, 0xfe, 0x00, 0x01, 0xf8, 
  0x0f, 0x80, 0xfe, 0x00, 0x03, 0xf0, 0x87, 0x08, 0x7e, 0x00, 0x0f, 0xe3, 0xc7, 0x1c, 0x7f, 0x80, 
  0x1f, 0xe3, 0xc7, 0x3e, 0x7f, 0xc0, 0x3f, 0xe3, 0xc7, 0x3e, 0x7f, 0xe0, 0x7f, 0xf1, 0x87, 0x1c, 
  0x7f, 0xe0, 0x7f, 0xf0, 0x0f, 0x80, 0xff, 0xf0, 0x7f, 0xf8, 0x1f, 0xc1, 0xff, 0xf0, 0xff, 0xff, 
  0x7f, 0xf7, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
  0x7f, 0xfc, 0x1f, 0xc3, 0xff, 0xf0, 0x7f, 0xfc, 0x00, 0x01, 0xff, 0xf0, 0x7f, 0xfc, 0x00, 0x03, 
  0xff, 0xf0, 0x3f, 0xfe, 0x00, 0x03, 0xff, 0xe0, 0x3f, 0xfe, 0x00, 0x07, 0xff, 0xe0, 0x1f, 0xff, 
  0x80, 0x0f, 0xff, 0xc0, 0x0f, 0xff, 0xc0, 0x1f, 0xff, 0x80, 0x07, 0xff, 0xfd, 0xff, 0xff, 0x00, 
  0x03, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x7f, 0xff, 0xff, 
  0xe0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf8, 0x00, 0x00 };


void testdrawbitmap(const uint8_t *bitmap, uint8_t w, uint8_t h) {
  uint8_t icons[NUMFLAKES][3];
  randomSeed(666);     // whatever seed
 
  // initialize
  for (uint8_t f=0; f< NUMFLAKES; f++) {
    icons[f][XPOS] = random(display.width());
    icons[f][YPOS] = 0;
    icons[f][DELTAY] = random(5) + 1;
    
    Serial.print("x: ");
    Serial.print(icons[f][XPOS], DEC);
    Serial.print(" y: ");
    Serial.print(icons[f][YPOS], DEC);
    Serial.print(" dy: ");
    Serial.println(icons[f][DELTAY], DEC);
  }

  while (1) {
    // draw each icon
    for (uint8_t f=0; f< NUMFLAKES; f++) {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS], bitmap, w, h, BLACK);
    }
    display.display();
    delay(200);

    while(Serial.available()) {
        switch (Serial.read()) {
          case 'w':display.setContrast(display.getContrast() + 1);
                   break;
          case 's':if(display.getContrast()) display.setContrast(display.getContrast() - 1);
                     break;
          case 'e':display.setBias(display.getBias() + 1);
                   break;
          case 'd':if(display.getBias()) display.setBias(display.getBias() - 1);
                   break;
          case 'R':display.setReinitInterval(10);
                   break;
          case 'r':display.initDisplay();
                   display.setReinitInterval(0);
                   break;
        }
    }
    Serial.print("contrast (w/s): 0x");
    Serial.print(display.getContrast(), HEX);
    Serial.print("   bias (e/d): 0x");
    Serial.print(display.getBias(), HEX);
    Serial.print("   reinitialize display (r/R): 0x");
    Serial.print(display.getReinitInterval(), HEX);
    Serial.print("   \r");

    // then erase it + move it
    for (uint8_t f=0; f< NUMFLAKES; f++) {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS],  poop, w, h, WHITE);
      // move it
      icons[f][YPOS] += icons[f][DELTAY];
      // if its gone, reinit
      if (icons[f][YPOS] > display.height()) {
  icons[f][XPOS] = random(display.width());
  icons[f][YPOS] = 0;
  icons[f][DELTAY] = random(5) + 1;
      }
    }
   }
}

void setup()   {
  Serial.begin(9600);
Serial.println("PCD test");
  display.begin();
  // init done

  // you can change the contrast around to adapt the display
  // for the best viewing!
  display.setContrast(75);

  display.display(); // show splashscreen
  delay(2000);
  display.clearDisplay();   // clears the screen and buffer  

  // miniature bitmap display
  display.clearDisplay();
  display.drawBitmap(1, 1,  poop, 45, 45, 1);
  display.display();
  // draw a bitmap icon and 'animate' movement
  //testdrawbitmap(poop, LOGO16_GLCD_WIDTH, LOGO16_GLCD_HEIGHT);
}


void loop() 
{
  while(1)
  {
    display.clearDisplay();
    display.drawBitmap(1, 1,  poop, 45, 45, 1);
    display.display();
    delay(2000);
    display.clearDisplay();
    display.drawBitmap(1, 1,  puppy, 45, 45, 1);
    display.display();
    delay(2000);
  }
  
}